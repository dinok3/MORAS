class vint{
    field int capacity;
    field Array A;

    constructor vint new(int n){
        let capacity = 1;
        while(n > 0){
            let capacity = 2 * capacity;
            let n = n - 1;
        }
        let A = Array.new(capacity);
        return this;
    }

    method int len(){
        return capacity;
    }

    method void set(int k, int v){
        if((k > -1) & (k < capacity)){
            let A[k] = v;
        }
        return;
    }

    method int get(int k){
        if((k > -1) & (k < capacity)){
            return A[k];
        }
        return -1;
    }

    method void resize(int m){
        var int i,j, new_capacity;
        var Array B;

        let new_capacity = 1;
        while(m > 0){
            let new_capacity = 2 * new_capacity;
            let m = m - 1;
        }
        
        let B = Array.new(new_capacity);
        let i = 0;
        let j = Math.min(capacity, new_capacity);
        while(i < j){
            let B[i] = A[i];
            let i = i + 1;
        }

        do A.dispose();

        let A = B;
        let capacity = new_capacity;
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }

    function bool is_eq(vint v1, vint v2){
        var int capacity, i;
        if(~(v1.len() = v2.len())){
            return false;
        }

        let i = 0;
        let capacity = v1.len();
        
        while(i < capacity){
            if(~(v1.get(i) = v2.get(i))){
                
                return false;
            }
            let i = i + 1;
        }
        
        return true;
    }

    function bool elems(vint v1, vint v2){
        var int capacity,i,j;
        var bool match;
        if(~(v1.len() = v2.len())){
            return false;
        }

        let capacity = v1.len();
        let i = 0;

        while(i < capacity){
            let j = 0;
            let match = false;

            while(j < capacity){
                if(v1.get(i) = v2.get(j)){
                    let match = true;
                }
                let j = j + 1;
            }

            if(~match){
                return false;
            }
            let i = i + 1;
        }

        return true;
    }
}